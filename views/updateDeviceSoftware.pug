extends layout

block content
    div(class='text-center center')
        meta(charset='UTF-8')
        meta(name='viewport' content='width=device-width, initial-scale=1.0')
        title Code Editor

        div(class='horizontal-container')
            div(class='vertical-container')
                form(method='POST', action='/updateDeviceSoftware')
                    textarea(placeholder='Write your code here...', id="contentTextarea", class='cartoon-container', style="width: 1000px")
                div(class='horizontal-container')
                    button.button(onclick=`updateCode('${device_topic}')`, style='width: auto; height: auto;')
                        span.text Update #{device_topic}
                div(class='horizontal-container')
                    input(type= 'text', placeholder='WiFi SSID', id="SSID", class='cartoon-container', style='width: 100px')
                div(class='horizontal-container')
                    input(type="password", placeholder="Wifi password", name="ssid_pass", id="password" class="input", required=true)
                        | Show password
                        input(type="checkbox", onclick=`hideViewPassword()`)
                        br


            div(class='text-center center-right')
                div(class='text-center center')
                    button.button(onclick='loadInoFile(1)')
                        span.text code1
                div(class='text-center center')
                    button.button(onclick='loadInoFile(2)')
                        span.text code2
                div(class='text-center center')
                    button.button(onclick='loadInoFile(3)')
                        span.text code3
                div(class='text-center center')
                    button.button(onclick='loadInoFile(4)')
                        span.text code4


    script.

        function hideViewPassword() {
            var x = document.getElementById("password");
            if (x.type === "password") {
                x.type = "text";
                hideView = "Hide password";
            } else {
                x.type = "password";
                hideView = "View password";
            }
        }

        function updateCode(topic) {
            // Get the value from the textarea
            var codeContent = document.getElementById("contentTextarea").value;
            var ssid = document.getElementById("SSID").value;
            var password = document.getElementById("PASSWORD").value;
            // Define the data to be sent in the POST request
            // Make the POST request
            // Define the data to be sent in the POST request
            var postData = {
                codeContent: codeContent,
                topic: topic,
                ssid: ssid,
                password: password
            };

            // Make the POST request
            fetch('/api/upload', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json' // Set the content type to JSON
                },
                body: JSON.stringify(postData) // Convert the data to JSON format
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle the response from the server
                    console.log('Server response:', data);
                })
                .catch(error => {
                    // Handle errors during the fetch
                    console.error('Error during fetch:', error);
                });

            // Update the global variable with the input value

            console.log(codeContent)
            // You can add code here to handle the update functionality
            //alert("Code Updated!")
        }

        function goBack() {
            // This will take the user back to the previous page
            window.history.back();
        }

        // Function to toggle the dropdown menu visibility
        function toggleDropdown() {
            let dropdown = document.getElementById("myDropdown");
            dropdown.style.display = (dropdown.style.display === "block") ? "none" : "block";
        }

        // Close the dropdown menu if the user clicks outside of it
        window.onclick = function (event) {
            if (!event.target.matches('.dropbtn')) {
                const dropdown = document.getElementById("myDropdown");
                if (dropdown.style.display === "block") {
                    dropdown.style.display = "none";
                }
            }
        }

        function loadInoFile(id) {
            if(id === 1) {
                document.getElementById('contentTextarea').value = code1();
            }else if (id === 2) {

                document.getElementById('contentTextarea').value = code2();
            }else if (id === 3){

                document.getElementById('contentTextarea').value = code3();
            }else if (id === 4) {

                document.getElementById('contentTextarea').value = code4();
            }
        }

    script.
        function code1() {
            return `
          #include <WiFiNINA.h>
          #include <Arduino_MKRIoTCarrier.h>
          #define NO_OTA_NETWORK
          #include <ArduinoOTA.h> // only for InternalStorage
          #include <ArduinoHttpClient.h>
          #include <PubSubClient.h>
          #include "arduino_secrets.h"

          //set interval for sending messages (milliseconds)
          const long interval = 3000;
          unsigned long previousMillis = 0;

          int count = 0;
          const short VERSION = 1;

          const char MY_SSID[] = SECRET_SSID; // Loaded from arduino_secrets.h
          const char MY_PASS[] = SECRET_PASS; // Loaded from arduino_secrets.h
          const char otatopic[] = SECRET_STOPIC; // Loaded from arduino_secrets.h
          const char broker[] = SECRET_BROKER; // Loaded from arduino_secrets.h
          int        port     = SECRET_PORT; // Loaded from arduino_secrets.h
          const char username[] = SECRET_UN; // Loaded from arduino_secrets.h
          const char password[] = SECRET_PW; // Loaded from arduino_secrets.h

          WiFiClient    wifiClient;  // HTTP
          WiFiSSLClient wifiClientSSL;  // HTTPS
          MKRIoTCarrier carrier;

          PubSubClient mqttClient(wifiClient);


          void handleSketchDownload(char PATH[]) {
            const char* SERVER = "p5test.blob.core.windows.net";  // Set your correct hostname
            const unsigned short SERVER_PORT = 443;     // Commonly 80 (HTTP) | 443 (HTTPS)
            const unsigned long CHECK_INTERVAL = 20000;  // Time interval between update checks (ms)

            // Time interval check
            static unsigned long previousMillis;
            unsigned long currentMillis = millis();
            if (currentMillis - previousMillis < CHECK_INTERVAL)
              return;
            previousMillis = currentMillis;

            //HttpClient client(wifiClient, SERVER, SERVER_PORT);  // HTTP
            HttpClient client(wifiClientSSL, SERVER, SERVER_PORT);  // HTTPS

            char buff[100];
            snprintf(buff, sizeof(buff), PATH, VERSION + 1);

            Serial.print("Check for update file ");
            Serial.println(buff);

            // Make the GET request
            client.get(buff);

            int statusCode = client.responseStatusCode();
            Serial.print("Update status code: ");
            Serial.println(statusCode);
            if (statusCode != 200) {
              client.stop();
              return;
            }

            long length = client.contentLength();
            if (length == HttpClient::kNoContentLengthHeader) {
              client.stop();
              Serial.println("Server didn't provide Content-length header. Can't continue with update.");
              return;
            }
            Serial.print("Server returned update file of size ");
            Serial.print(length);
            Serial.println(" bytes");

            if (!InternalStorage.open(length)) {
              client.stop();
              Serial.println("There is not enough space to store the update. Can't continue with update.");
              return;
            }
            byte b;
            while (length > 0) {
              if (!client.readBytes(&b, 1)) // reading a byte with timeout
                break;
              InternalStorage.write(b);
              length--;
            }
            InternalStorage.close();
            client.stop();

            if (length > 0) {
              Serial.print("Timeout downloading update file at ");
              Serial.print(length);
              Serial.println(" bytes. Can't continue with update.");
              return;
            }

            Serial.println("Sketch update apply and reset.");
                    // Respond to the client
            Serial.flush();
            InternalStorage.apply(); // this doesn't return
            Serial.println("done");
          }

          void setup() {

            //Initialize serial and wait for port to open:
            Serial.begin(9600);

            // attempt to connect to Wifi network:
            Serial.print("Attempting to connect to SSID: ");
            Serial.println(MY_SSID);
            while (WiFi.begin(MY_SSID, MY_PASS) != WL_CONNECTED) {
              // failed, retry
              Serial.print(".");
              delay(5000);
            }

            Serial.println("You're connected to the network");
            Serial.println();

            Serial.print("Attempting to connect to the MQTT broker: ");
            Serial.println(broker);

              // Configure MQTT broker
            mqttClient.setServer(broker, port);
            mqttClient.setCallback(callback);

            if (!mqttClient.connect("arduino", username, password)) {
              Serial.print("MQTT connection failed! Error code = ");
              Serial.println(mqttClient.state());

              while (1);
            }

            Serial.println("You're connected to the MQTT broker!");
            Serial.println();


            Serial.print("Subscribing to topic: ");
            Serial.println(otatopic);
            Serial.println();

            // subscribe to a topic
            mqttClient.subscribe(otatopic);


            // topics can be unsubscribed using:
            // mqttClient.unsubscribe(topic);

            Serial.print("Topic: ");
            Serial.println(otatopic);

            Serial.println();
            carrier.begin();
            carrier.display.fillScreen(0xFBC0); // green

          }

          void loop() {
            mqttClient.loop();
            float temperature = carrier.Env.readTemperature();
                          float humidity = carrier.Env.readHumidity();

                          // record random value from A0, A1, and A2
                          float Rvalue = temperature;
                          float Rvalue2 = humidity;

                          // Concatenate otatopic with temperature and humidity topics
                          String temperatureTopic = "/sensor/" + String(otatopic) + "/Temperature";
                          String humidityTopic = "/sensor/" + String(otatopic) + "/Humidity";
                          Serial.print(temperatureTopic);

                          // Publish temperature and humidity to MQTT topics
                          Serial.println(mqttClient.publish(temperatureTopic.c_str(), String(Rvalue).c_str()));
                          mqttClient.publish(humidityTopic.c_str(), String(Rvalue2).c_str());
                          delay(10000);
          }


          void callback(char* topic, byte* payload, unsigned int length) {
            // we received a message, print out the topic and contents
            Serial.println("Received a message with topic '");
            Serial.print(topic);
            Serial.print("', length ");
            Serial.print(length);
            Serial.println(" bytes:");

            Serial.print("Payload: ");
            char messageBuffer[length - 1];


            for (int i = 0; i < length; i++) {
              messageBuffer[i] = (char)payload[i];
            }
            messageBuffer[length] = '\\0';



            // Call the function and pass the message buffer
            handleSketchDownload(messageBuffer);


          }
            `;
        }


        function code2() {
            return `

                                  #include <WiFiNINA.h>
                                  #include <ArduinoHttpClient.h>
                                  #include <Arduino_MKRIoTCarrier.h>

                                  #define NO_OTA_NETWORK
                                  #include <ArduinoOTA.h> // only for InternalStorage

                                  // Please enter your WiFi sensitive data in the arduino_secrets.h file
                                  #include "arduino_secrets.h"

                                  const short VERSION = 1;

                                  const char MY_SSID[] = SECRET_SSID; // Loaded from arduino_secrets.h
                                  const char MY_PASS[] = SECRET_PASS; // Loaded from arduino_secrets.h

                                  // WiFiClient    wifiClient;  // HTTP
                                  WiFiSSLClient wifiClientSSL;  // HTTPS
                                  MKRIoTCarrier carrier;
                                  int status = WL_IDLE_STATUS;

                                  WiFiServer server(80);  // Use a port number that is not conflicting with other services

                                  void handleSketchDownload(WiFiClient& clientt) {
                                    const char* SERVER = "p5test.blob.core.windows.net";  // Set your correct hostname
                                    const unsigned short SERVER_PORT = 443;     // Commonly 80 (HTTP) | 443 (HTTPS)
                                    const char* PATH = "/binfiles/red.ino.bin";  // Set the URI to the .bin firmware
                                    const unsigned long CHECK_INTERVAL = 20000;  // Time interval between update checks (ms)

                                    // Time interval check
                                    static unsigned long previousMillis;
                                    unsigned long currentMillis = millis();
                                    if (currentMillis - previousMillis < CHECK_INTERVAL)
                                      return;
                                    previousMillis = currentMillis;

                                    // HttpClient client(wifiClient, SERVER, SERVER_PORT);  // HTTP
                                    HttpClient client(wifiClientSSL, SERVER, SERVER_PORT);  // HTTPS

                                    char buff[100];
                                    snprintf(buff, sizeof(buff), PATH, VERSION + 1);

                                    Serial.print("Check for update file ");
                                    Serial.println(buff);

                                    // Make the GET request
                                    client.get(buff);

                                    int statusCode = client.responseStatusCode();
                                    Serial.print("Update status code: ");
                                    Serial.println(statusCode);
                                    if (statusCode != 200) {
                                      client.stop();
                                      return;
                                    }

                                    long length = client.contentLength();
                                    if (length == HttpClient::kNoContentLengthHeader) {
                                      client.stop();
                                      Serial.println("Server didn't provide Content-length header. Can't continue with update.");
                                      return;
                                    }
                                    Serial.print("Server returned update file of size ");
                                    Serial.print(length);
                                    Serial.println(" bytes");

                                    if (!InternalStorage.open(length)) {
                                      client.stop();
                                      Serial.println("There is not enough space to store the update. Can't continue with update.");
                                      return;
                                    }
                                    byte b;
                                    while (length > 0) {
                                      if (!client.readBytes(&b, 1)) // reading a byte with timeout
                                        break;
                                      InternalStorage.write(b);
                                      length--;
                                    }
                                    InternalStorage.close();
                                    client.stop();

                                    if (length > 0) {
                                      Serial.print("Timeout downloading update file at ");
                                      Serial.print(length);
                                      Serial.println(" bytes. Can't continue with update.");
                                      return;
                                    }

                                    Serial.println("Sketch update apply and reset.");
                                            // Respond to the client
                                    clientt.println("HTTP/1.1 200 OK");
                                    clientt.println("Content-Type: text/html");
                                    clientt.println();
                                    clientt.println("<h1>Update Triggered!</h1>");

                                          // Close the connection
                                    clientt.stop();
                                    Serial.flush();
                                    InternalStorage.apply(); // this doesn't return
                                    Serial.println("done");
                                  }

                                  void setup() {

                                    Serial.begin(115200);
                                    while (!Serial);

                                    Serial.print("Sketch version ");
                                    Serial.println(VERSION);

                                    Serial.println("Initialize WiFi");
                                    // attempt to connect to Wifi network:
                                    while (status != WL_CONNECTED) {
                                      Serial.print("Attempting to connect to SSID: ");
                                      Serial.println(MY_SSID);
                                      // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
                                      status = WiFi.begin(MY_SSID, MY_PASS);
                                    }
                                    Serial.println("WiFi connected");
                                    Serial.print("WiFi connected. IP address: ");
                                    Serial.println(WiFi.localIP());
                                    carrier.begin();
                                    carrier.display.fillScreen(0x07E0); // green

                                    server.begin();  // Start the server
                                    Serial.println("Server started");
                                  }

                                  void loop() {
                                    WiFiClient client = server.available();
                                    if (client) {
                                      Serial.println("New client connected");

                                      // Wait for the client to send data
                                      while (client.connected()) {
                                        if (client.available()) {
                                          // Read the data sent by the client
                                          String command = client.readStringUntil('\r');
                                          command.trim();

                                          // Check for the update command
                                          if (command == "update") {
                                            handleSketchDownload(client);
                                          }

                                          // Respond to the client
                                          client.println("HTTP/1.1 200 OK");
                                          client.println("Content-Type: text/html");
                                          client.println();
                                          client.println("<h1>Update Triggered!</h1>");

                                          // Close the connection
                                          client.stop();
                                          Serial.println("Client disconnected");
                                          break;
                                        }
                                      }
                                    }
                                    float temperature = carrier.Env.readTemperature();
                                    float humidity = carrier.Env.readHumidity();

                                    // record random value from A0, A1, and A2
                                    float Rvalue = temperature;
                                    float Rvalue2 = humidity;

                                     // Concatenate otatopic with temperature and humidity topics
                                     String temperatureTopic = String(otatopic) + "/temperature_topic";
                                     String humidityTopic = String(otatopic) + "/humidity_topic";
                                     Serial.print(temperatureTopic);

                                     // Publish temperature and humidity to MQTT topics
                                     Serial.println(mqttClient.publish(temperatureTopic.c_str(), String(Rvalue).c_str()));
                                     mqttClient.publish(humidityTopic.c_str(), String(Rvalue2).c_str());
                                     delay(1000);

                                  }
                                `;
        }


        function code3() {
            return `
                                  #include <WiFiNINA.h>
                                  #include <ArduinoHttpClient.h>
                                  #include <Arduino_MKRIoTCarrier.h>

                                  #define NO_OTA_NETWORK
                                  #include <ArduinoOTA.h> // only for InternalStorage

                                  // Please enter your WiFi sensitive data in the arduino_secrets.h file
                                  #include "arduino_secrets.h"

                                  const short VERSION = 1;

                                  const char MY_SSID[] = SECRET_SSID; // Loaded from arduino_secrets.h
                                  const char MY_PASS[] = SECRET_PASS; // Loaded from arduino_secrets.h

                                  // WiFiClient    wifiClient;  // HTTP
                                  WiFiSSLClient wifiClientSSL;  // HTTPS
                                  MKRIoTCarrier carrier;
                                  int status = WL_IDLE_STATUS;

                                  WiFiServer server(80);  // Use a port number that is not conflicting with other services

                                  void handleSketchDownload(WiFiClient& clientt) {
                                    const char* SERVER = "p5test.blob.core.windows.net";  // Set your correct hostname
                                    const unsigned short SERVER_PORT = 443;     // Commonly 80 (HTTP) | 443 (HTTPS)
                                    const char* PATH = "/binfiles/red.ino.bin";  // Set the URI to the .bin firmware
                                    const unsigned long CHECK_INTERVAL = 20000;  // Time interval between update checks (ms)

                                    // Time interval check
                                    static unsigned long previousMillis;
                                    unsigned long currentMillis = millis();
                                    if (currentMillis - previousMillis < CHECK_INTERVAL)
                                      return;
                                    previousMillis = currentMillis;

                                    // HttpClient client(wifiClient, SERVER, SERVER_PORT);  // HTTP
                                    HttpClient client(wifiClientSSL, SERVER, SERVER_PORT);  // HTTPS

                                    char buff[100];
                                    snprintf(buff, sizeof(buff), PATH, VERSION + 1);

                                    Serial.print("Check for update file ");
                                    Serial.println(buff);

                                    // Make the GET request
                                    client.get(buff);

                                    int statusCode = client.responseStatusCode();
                                    Serial.print("Update status code: ");
                                    Serial.println(statusCode);
                                    if (statusCode != 200) {
                                      client.stop();
                                      return;
                                    }

                                    long length = client.contentLength();
                                    if (length == HttpClient::kNoContentLengthHeader) {
                                      client.stop();
                                      Serial.println("Server didn't provide Content-length header. Can't continue with update.");
                                      return;
                                    }
                                    Serial.print("Server returned update file of size ");
                                    Serial.print(length);
                                    Serial.println(" bytes");

                                    if (!InternalStorage.open(length)) {
                                      client.stop();
                                      Serial.println("There is not enough space to store the update. Can't continue with update.");
                                      return;
                                    }
                                    byte b;
                                    while (length > 0) {
                                      if (!client.readBytes(&b, 1)) // reading a byte with timeout
                                        break;
                                      InternalStorage.write(b);
                                      length--;
                                    }
                                    InternalStorage.close();
                                    client.stop();

                                    if (length > 0) {
                                      Serial.print("Timeout downloading update file at ");
                                      Serial.print(length);
                                      Serial.println(" bytes. Can't continue with update.");
                                      return;
                                    }

                                    Serial.println("Sketch update apply and reset.");
                                            // Respond to the client
                                    clientt.println("HTTP/1.1 200 OK");
                                    clientt.println("Content-Type: text/html");
                                    clientt.println();
                                    clientt.println("<h1>Update Triggered!</h1>");

                                          // Close the connection
                                    clientt.stop();
                                    Serial.flush();
                                    InternalStorage.apply(); // this doesn't return
                                    Serial.println("done");
                                  }

                                  void setup() {

                                    Serial.begin(115200);
                                    while (!Serial);

                                    Serial.print("Sketch version ");
                                    Serial.println(VERSION);

                                    Serial.println("Initialize WiFi");
                                    // attempt to connect to Wifi network:
                                    while (status != WL_CONNECTED) {
                                      Serial.print("Attempting to connect to SSID: ");
                                      Serial.println(MY_SSID);
                                      // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
                                      status = WiFi.begin(MY_SSID, MY_PASS);
                                    }
                                    Serial.println("WiFi connected");
                                    Serial.print("WiFi connected. IP address: ");
                                    Serial.println(WiFi.localIP());
                                    carrier.begin();
                                    carrier.display.fillScreen(0x07E0); // green

                                    server.begin();  // Start the server
                                    Serial.println("Server started");
                                  }

                                  void loop() {
                                    WiFiClient client = server.available();
                                    if (client) {
                                      Serial.println("New client connected");

                                      // Wait for the client to send data
                                      while (client.connected()) {
                                        if (client.available()) {
                                          // Read the data sent by the client
                                          String command = client.readStringUntil('\r');
                                          command.trim();

                                          // Check for the update command
                                          if (command == "update") {
                                            handleSketchDownload(client);
                                          }

                                          // Respond to the client
                                          client.println("HTTP/1.1 200 OK");
                                          client.println("Content-Type: text/html");
                                          client.println();
                                          client.println("<h1>Update Triggered!</h1>");

                                          // Close the connection
                                          client.stop();
                                          Serial.println("Client disconnected");
                                          break;
                                        }
                                      }
                                    }
                                  }
                                `;
        }


        function code4() {
            return `Så bliver det vist ikke mere dynamisk`;
        }



